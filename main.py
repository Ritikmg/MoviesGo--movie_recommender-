# importing libraries----------

import pandas as pd
import numpy as np
from nltk.stem.snowball import SnowballStemmer  # Removing stem words
from sklearn.feature_extraction.text import CountVectorizer  # To convert text to numerical data
from sklearn.metrics.pairwise import linear_kernel, cosine_similarity
from collections import defaultdict
import warnings  # disable python warnings
import requests
from surprise import Reader, Dataset, SVD
from surprise.model_selection import cross_validate
from collections import defaultdict
import ssl

ssl._create_default_https_context = ssl._create_unverified_context
import csv

warnings.filterwarnings("ignore")
import re  # check whether a given string matches a given pattern (using the match function), or contains such apattern (using the search function)
import tkinter.font as tkFont
from tkinter import *
from PIL import ImageTk, Image
from PIL import Image
from urllib.request import urlopen
from tkinter import Canvas

root = Tk()
root.title("MoviesGo")
root.state("zoomed")
root.geometry("1544x840")
root.configure(bg="#ffffff")

# file reading ---------------------------------------------

# Note-> For getting movies poster we have fetched the data from an api(omdb_api).The api take imdb_id of movie as input and gives us the link for the poster of the movie.

movies_data = pd.read_csv("Database//movies_metadata.csv", low_memory=False)

# for top30 movies(top_hits page)
file_top30 = open("Database//top_30_movies_url_link", "r")
data_top30 = file_top30.read()
data_top30 = data_top30.replace('\n', ' ').split(".jpg")
file_top30.close()   

data_top30_gen = data_top30 # it stores the link of top30 movies poster according to genres
data_top30_sts = data_top30 # it stores the link of top30 similar movies poster according to the search of the user
data_top9_rtg = [] # it stores the link of top9 movies poster interpreted according the rating of the user

#for content based filtering(similar-to-search)
data_smd = pd.read_csv("Database//soup_data.csv", low_memory=False) # soup_data file is the file after cleaning the data
data_content_based = pd.read_csv("Database//links_for_id.csv", low_memory=False) # links_for_id file contains links of movies poster
count = CountVectorizer(analyzer='word', ngram_range=(1, 2), min_df=0, stop_words='english')
count_matrix = count.fit_transform(data_smd['soup'])
cosine_sim = cosine_similarity(count_matrix, count_matrix)
indices = pd.Series(data_smd.index, index=data_smd['title'])  # Creating a mapping between movie and title and index
df_cosine = pd.DataFrame(cosine_sim)

#for collaborative filtering(rate-to-get)
data_ratings = pd.read_csv("Database//ratings_small.csv", low_memory=False)
data_ratings = data_ratings.drop(columns="timestamp") # drop the timestamp column since we dont need it now


# variable declaration
label1 = Label()
label2 = Label()
label3 = Label()
num1 = Label()
num2 = Label()
num3 = Label()
frame1 = Frame()
frame2 = Frame()
frame3 = Frame()
forward_button = Button()
backward_button = Button()

# Note ->

# we reduced the time complexity for "top hits" and "top genres" by storing the link of top30 popular and top30 genre wise popular movies     in a file that is generated by implementing the below commented code ->

##------------------ code for making top hits files---------------------##

# movies_data = movies_data.dropna(subset=['vote_average', 'vote_count'])

# def weighted_rating(v,R):
#        return ((v/(v+m)) * R) + ((m/(m+v)) * C)

# C = movies_data['vote_average'].mean()
# m = movies_data['vote_count'].quantile(0.95)
# top_movies = movies_data.copy().loc[movies_data['vote_count'] >= m]
# top_movies = top_movies.reset_index()
# top_movies['score'] = ''
# for i in range(top_movies.shape[0]):
#     v = top_movies['vote_count'][i]
#     R = top_movies['vote_average'][i]
#     top_movies['score'][i] = weighted_rating(v,R)

# top_movies = top_movies.sort_values('score', ascending=False)
# top_movies = top_movies.reset_index()
# top_30_movies = top_movies[['title', 'score','imdb_id']].head(30)
# list=[]

# for it in range(30):
#     id = top_30_movies['imdb_id'][it]
#     request_id = "http://www.omdbapi.com/?i=" + id + "&apikey=4a0bad91"
#     json_data = requests.get(request_id).json()
#     link = json_data['Poster']
#     list.append(link)

# with open("top_30_movies_url_link",'w',newline='') as f:
#     fieldnames=["photos"]
#     thewriter=csv.DictWriter(f,fieldnames=fieldnames)
#     thewriter.writeheader()
#     for i in range(30):
#         thewriter.writerow({'photos' : list[i]})


##------------------ code for making top genres files---------------------##

# def genres_based_rcmnd(name):
#     if name not in genres:
#         return None
#     else:
#         return genres_based[name][['title', 'imdb_id', 'score']].head(10)

# genres = set()
# top_movies['genres'] = top_movies['genres'].apply(literal_eval)
# for i in range(top_movies['genres'].shape[0]):   # converting string in map
#     for x in top_movies['genres'][i]:
#         genres.add(x['name'])

# genres_based = dict()
# for i in range(top_movies['genres'].shape[0]):
#     for x in top_movies['genres'][i]:
#         if x['name'] not in genres_based.keys():
#             genres_based[x['name']] = pd.DataFrame(columns = top_movies.columns)
#         genres_based[x['name']] = genres_based[x['name']].append(top_movies.iloc[i])
# name="Thriller"
# genres_based[name]=genres_based[name].reset_index(drop=True)
# list=[]
# for it in range(30):
#     id = genres_based[name]['imdb_id'][it]
#     request_id = "http://www.omdbapi.com/?i=" + id + "&apikey=4a0bad91"
#     json_data = requests.get(request_id).json()
#     link = json_data['Poster']
#     list.append(link)
# with open("top_30_"+name+"_movies_url_link",'w',newline='') as f:
#     fieldnames=["photos"]
#     thewriter=csv.DictWriter(f,fieldnames=fieldnames)
#     thewriter.writeheader()
#     for i in range(30):
#         thewriter.writerow({'photos' : list[i]})



def hometab(): # this function contains code for home page

    def forward(first_ind,val): # this function ensures the forward navigation of the movies poster
        global label1
        global label2
        global label3
        global forward_button
        global backward_button
        global num1
        global num2
        global num3

        x1 = 0
        x2 = 0
        y1 = 0
        y2 = 0
        ending = 27

        if val == 1:
            data_top = data_top30
            x1 = 1335
            x2 = 1415
            y1 = 410
            y2 = 411
        elif val == 2:
            data_top = data_top30_gen
            x1 = 1332
            x2 = 1410
            y1 = 400
            y2 = 400
        elif val == 3:
            data_top = data_top30_sts
            x1 = 1328
            x2 = 1419
            y1 = 468
            y2 = 468
        elif val == 4:
            data_top = data_top9_rtg
            x1 = 1335
            x2 = 1415
            y1 = 410
            y2 = 411
            ending = 6
        
        # destroying the elements of the current list of 3 movies so that we can move to new 3 movies
        label1.pack_forget()
        label2.pack_forget()
        label3.pack_forget()
        forward_button.pack_forget()
        backward_button.pack_forget()
        num1.pack_forget()
        num2.pack_forget()
        num3.pack_forget()
    
        # making labels
        num1 = Label(frame1, text=first_ind + 1, font="satoshi 15 bold", fg="white", bg="black")
        num1.pack()
        num2 = Label(frame2, text=first_ind + 2, font="satoshi 15 bold", fg="white", bg="black")
        num2.pack()
        num3 = Label(frame3, text=first_ind + 3, font="satoshi 15 bold", fg="white", bg="black")
        num3.pack()

        # getting movie poster links from the data_top file
        link1 = f"{data_top[first_ind]}.jpg"
        u1 = urlopen(link1)
        rg1 = u1.read()
        u1.close()

        link2 = f"{data_top[first_ind + 1]}.jpg"
        u2 = urlopen(link2)
        rg2 = u2.read()
        u2.close()

        link3 = f"{data_top[first_ind + 2]}.jpg"
        u3 = urlopen(link3)
        rg3 = u3.read()
        u3.close()

        # placing movies poster on the labels created above
        photo1 = ImageTk.PhotoImage(data=rg1)
        label1 = Label(frame1, image=photo1, width=400, height=500, bg="black")
        label1.image = photo1
        photo2 = ImageTk.PhotoImage(data=rg2)
        label2 = Label(frame2, image=photo2, width=400, height=500, bg="black")
        label2.image = photo2
        photo3 = ImageTk.PhotoImage(data=rg3)
        label3 = Label(frame3, image=photo3, width=400, height=500, bg="black")
        label3.image = photo3
        
        # making and placing forward and backward button
        backward_button = Button(root, text="<<", font="satoshi 15 bold", bg="black", fg="white",
                                 command=lambda: backward(first_ind - 3, val))
        forward_button = Button(root, text=">>", font="satoshi 15 bold", fg="white", bg="black",
                                command=lambda: forward(first_ind + 3, val))

        if first_ind == ending:
            forward_button = Button(root, text=">>", font="satoshi 15 bold", fg="white", bg="black", state=DISABLED)

        label1.pack()
        label2.pack()
        label3.pack()
        backward_button.place(x=x1, y=y1, width=54, height=50)
        forward_button.place(x=x2, y=y2, width=54, height=50)

    def backward(first_ind, val): # this function ensures the backward navigation of the movies poster
        global label1
        global label2
        global label3
        global forward_button
        global backward_button
        global num1
        global num2
        global num3
        x1 = 0
        x2 = 0
        y1 = 0
        y2 = 0

        if val == 1:
            data_top = data_top30
            x1= 1335
            x2= 1415
            y1= 410
            y2= 411
        elif val == 2:
            data_top = data_top30_gen
            x1 = 1332
            x2 = 1410
            y1 = 400
            y2 = 400
        elif val == 3:
            data_top = data_top30_sts
            x1 = 1328
            x2 = 1419
            y1 = 468
            y2 = 468
        elif val == 4:
            data_top = data_top9_rtg
            x1 = 1335
            x2 = 1415
            y1 = 410
            y2 = 411

        # destroying the elements of the current list of 3 movies so that we can move to new 3 movies
        label1.pack_forget()
        label2.pack_forget()
        label3.pack_forget()
        forward_button.pack_forget()
        backward_button.pack_forget()
        num1.pack_forget()
        num2.pack_forget()
        num3.pack_forget()

        # making labels
        num1 = Label(frame1, text=first_ind + 1, font="satoshi 15 bold", fg="white", bg="black")
        num1.pack()
        num2 = Label(frame2, text=first_ind + 2, font="satoshi 15 bold", fg="white", bg="black")
        num2.pack()
        num3 = Label(frame3, text=first_ind + 3, font="satoshi 15 bold", fg="white", bg="black")
        num3.pack()

        # getting movie poster links from the data_top file
        link1 = f"{data_top[first_ind]}.jpg"
        u1 = urlopen(link1)
        rg1 = u1.read()
        u1.close()

        link2 = f"{data_top[first_ind + 1]}.jpg"
        u2 = urlopen(link2)
        rg2 = u2.read()
        u2.close()

        link3 = f"{data_top[first_ind + 2]}.jpg"
        u3 = urlopen(link3)
        rg3 = u3.read()
        u3.close()

        # placing movies poster on the labels created above
        photo1 = ImageTk.PhotoImage(data=rg1)
        label1 = Label(frame1, image=photo1, width=400, height=500, bg="black")
        label1.image = photo1
        photo2 = ImageTk.PhotoImage(data=rg2)
        label2 = Label(frame2, image=photo2, width=400, height=500, bg="black")
        label2.image = photo2
        photo3 = ImageTk.PhotoImage(data=rg3)
        label3 = Label(frame3, image=photo3, width=400, height=500, bg="black")
        label3.image = photo3

        # making and placing forward and backward button
        backward_button = Button(root, text="<<", font="satoshi 15 bold", bg="black", fg="white",
                                 command=lambda: backward(first_ind - 3,val))
        forward_button = Button(root, text=">>", font="satoshi 15 bold", fg="white", bg="black",
                                command=lambda: forward(first_ind + 3,val))

        if first_ind == 0:
            backward_button = Button(root, text=">>", font="satoshi 15 bold", fg="white", bg="black",
                                     state=DISABLED)

        label1.pack()
        label2.pack()
        label3.pack()
        backward_button.place(x=x1, y=y1, width=54, height=50)
        forward_button.place(x=x2, y=y2, width=54, height=50)
        
    def init(idx): # this function show the top3 most popular movies poster by default (i.e. this is the condition when user has just click                    the top_genres button but has not selected any genre) 
        global label1
        global label2
        global label3
        global num1
        global num2
        global num3
        global frame1
        global frame2
        global frame3
        global forward_button
        global backward_button
        data_top = []
        x1=0
        x2=0
        x3=0
        x4=0
        x5=0
        y1=0
        y2=0
        y3=0
        y4=0
        y5=0

        if idx == 1:
            data_top = data_top30
            x1 = 62
            x2 = 493
            x3 = 924
            x4 = 1335
            x5 = 1415
            y1 = 223
            y2 = 223
            y3 = 223
            y4 = 410
            y5 = 411
        elif idx == 2:
            data_top = data_top30_gen
            x1 = 80
            x2 = 500
            x3 = 918
            x4 = 1332
            x5 = 1410
            y1 = 220
            y2 = 220
            y3 = 220
            y4 = 400
            y5 = 400
        elif idx == 3:
            data_top = data_top30_sts
            x1 = 70
            x2 = 495
            x3 = 919
            x4 = 1328
            x5 = 1419
            y1 = 270
            y2 = 270
            y3 = 270
            y4 = 468
            y5 = 468
        elif idx == 4:
            data_top = data_top9_rtg
            x1 = 62
            x2 = 493
            x3 = 924
            x4 = 1335
            x5 = 1415
            y1 = 223
            y2 = 223
            y3 = 223
            y4 = 410
            y5 = 411

        # getting movie poster links from the data_top file
        link1 = f"{data_top[0]}.jpg"
        u1 = urlopen(link1)
        rg1 = u1.read()
        u1.close()

        link2 = f"{data_top[1]}.jpg"
        u2 = urlopen(link2)
        rg2 = u2.read()
        u2.close()

        link3 = f"{data_top[2]}.jpg"
        u3 = urlopen(link3)
        rg3 = u3.read()
        u3.close()

        # making labels and placing movies poster on the created labels
        frame1 = Frame(root, bg="black")
        frame1.place(x=x1, y=y1, width=400, height=500)
        num1 = Label(frame1, text="1", font="satoshi 15 bold", fg="white", bg="black")
        num1.pack()
        photo1 = ImageTk.PhotoImage(data=rg1)
        label1 = Label(frame1, image=photo1, width=400, height=500, bg="black")
        label1.image = photo1
        label1.pack()

        frame2 = Frame(root, bg="black")
        frame2.place(x=x2, y=y2, width=400, height=500)
        num2 = Label(frame2, text="2", font="satoshi 15 bold", fg="white", bg="black")
        num2.pack()
        photo2 = ImageTk.PhotoImage(data=rg2)
        label2 = Label(frame2, image=photo2, width=400, height=500, bg="black")
        label2.image = photo2
        label2.pack()

        frame3 = Frame(root, bg="black")
        frame3.place(x=x3, y=y3, width=400, height=500)
        num3 = Label(frame3, text="3", font="satoshi 15 bold", fg="white", bg="black")
        num3.pack()
        photo3 = ImageTk.PhotoImage(data=rg3)
        label3 = Label(frame3, image=photo3, width=400, height=500, bg="black")
        label3.image = photo3
        label3.pack()

        # making and placing forward and backward button
        backward_button = Button(root, text="<<", font="satoshi 15 bold", bg="black", fg="white", command=backward,
                                 state=DISABLED)
        backward_button.place(x=x4, y=y4, width=54, height=50)
        forward_button = Button(root, text=">>", font="satoshi 15 bold", fg="white", bg="black",
                                command=lambda: forward(3, idx))
        forward_button.place(x=x5, y=y5, width=54, height=50)

    def hometab_destroy(): # this function destroys the home page
        background_img_label.destroy()
        mybutton1.destroy()
        mybutton2.destroy()
        mybutton3.destroy()
        mybutton4.destroy()

    def top_hits_tab(): # defining the function that will execute when user clicks on top hits button on homepage
        hometab_destroy()

        def back(): # defining the function for back to home button in the top_hits section
            # function calls to destroy the elements of the top_hits section so that the user can return to homepage
            Label_background.destroy()
            button1_.destroy()
            frame1.destroy()
            frame2.destroy()
            frame3.destroy()
            backward_button.destroy()
            forward_button.destroy()
            hometab()
  
        # placing the background image on top_hits page
        background_image = PhotoImage(file="photos//background_top.png")
        Label_background = Label(root, image=background_image)
        Label_background.image = background_image
        Label_background.place(x=0, y=0)

        def on_enter1_(e): # function for giving hovering effects to the buttons while entering the button
            button1_['background'] = "#EB455F"
            button1_['foreground'] = "#141414"

        def on_leave1_(e): # function for giving hovering effects to the buttons while leaving the button
            button1_['background'] = "#141414"
            button1_['foreground'] = "#EB455F"

        button1_ = Button(text="Back To Home", font="aerial 12 bold", borderwidth=0, highlightthickness=0,
                          relief="flat", fg="#EB455F", bg="#141414", activeforeground="#141414",
                          activebackground="#EB455F", command=back)

        button1_.bind("<Enter>", on_enter1_) # hovering effect while entering
        button1_.bind("<Leave>", on_leave1_) # hovering effect while leaving
        button1_.place(x=3, y=3.4, width=141, height=48)

        global label1
        global label2
        global label3
        global num1
        global num2
        global num3
        global frame1
        global frame2
        global frame3
        global forward_button
        global backward_button
        init(1)

    def top_genres(): # defining the function that will execute when user clicks on top_genres button on homepage
        hometab_destroy()
        global data_top30_gen
        data_top30_gen = data_top30
        def backgo():  # defining the function for back to home button in the top_genres section
            # function calls to destroy the elements of the top_genres section so that the user can return to homepage
            Label_background.destroy()
            button1_.destroy()
            button2_.destroy()
            button3_.destroy()
            button4_.destroy()
            button5_.destroy()
            button6_.destroy()
            button7_.destroy()
            button8_.destroy()
            button9_.destroy()
            button10_.destroy()
            button11_.destroy()
            button12_.destroy()
            frame1.destroy()
            frame2.destroy()
            frame3.destroy()
            backward_button.destroy()
            forward_button.destroy()
            hometab()

        def fun(): # defining a general function that will execute when user clicks any of the genre
            global label1
            global label2
            global label3
            global num1
            global num2
            global num3
            global frame1
            global frame2
            global frame3
            global forward_button
            global backward_button

            # destroying the elements of the current list of 3 movies so that we can move to new 3 movies
            label1.pack_forget()
            label2.pack_forget()
            label3.pack_forget()
            forward_button.pack_forget()
            backward_button.pack_forget()
            num1.pack_forget()
            num2.pack_forget()
            num3.pack_forget()
            # making label
            num1 = Label(frame1, text=1, font="satoshi 15 bold", fg="white", bg="black")
            num1.pack()
            num2 = Label(frame2, text=2, font="satoshi 15 bold", fg="white", bg="black")
            num2.pack()
            num3 = Label(frame3, text=3, font="satoshi 15 bold", fg="white", bg="black")
            num3.pack()
            # making and placing forward and backward button
            backward_button = Button(root, text="<<", font="satoshi 15 bold", bg="black", fg="white",
                                     command=backward, state=DISABLED)
            forward_button = Button(root, text=">>", font="satoshi 15 bold", fg="white", bg="black",
                                    command=lambda: forward(3,2))
            backward_button.place(x=1332, y=400, width=54, height=50)
            forward_button.place(x=1410, y=400, width=54, height=50)
            # getting movie poster links from the data_top30_gen file
            link1 = f"{data_top30_gen[0]}.jpg"
            u1 = urlopen(link1)
            rg1 = u1.read()
            u1.close()

            link2 = f"{data_top30_gen[1]}.jpg"
            u2 = urlopen(link2)
            rg2 = u2.read()
            u2.close()

            link3 = f"{data_top30_gen[2]}.jpg"
            u3 = urlopen(link3)
            rg3 = u3.read()
            u3.close()
            # placing movies poster on the labels created above
            photo1 = ImageTk.PhotoImage(data=rg1)
            label1 = Label(frame1, image=photo1, width=400, height=500, bg="black")
            label1.image = photo1
            photo2 = ImageTk.PhotoImage(data=rg2)
            label2 = Label(frame2, image=photo2, width=400, height=500, bg="black")
            label2.image = photo2
            photo3 = ImageTk.PhotoImage(data=rg3)
            label3 = Label(frame3, image=photo3, width=400, height=500, bg="black")
            label3.image = photo3
            label1.pack()
            label2.pack()
            label3.pack()

        def action(): # this function contains code for action page of genres
            global data_top30_gen
            temp1 = open("Database//top_30_Action_movies_url_link", "r")
            temp2 = temp1.read()
            temp3 = temp2.replace('\n', ' ').split(".jpg")
            temp1.close()
            data_top30_gen = temp3
            fun()

        def adventure(): # this function contains code for adventure page of genres
            global data_top30_gen
            temp1 = open("Database//top_30_Adventure_movies_url_link", "r")
            temp2 = temp1.read()
            temp3 = temp2.replace('\n', ' ').split(".jpg")
            temp1.close()
            data_top30_gen = temp3
            fun()

        def animation(): # this function contains code for animation page of genres
            global data_top30_gen
            temp1 = open("Database//top_30_Animation_movies_url_link", "r")
            temp2 = temp1.read()
            temp3 = temp2.replace('\n', ' ').split(".jpg")
            temp1.close()
            data_top30_gen = temp3
            fun()

        def comedy(): # this function contains code for comedy page of genres
            global data_top30_gen
            temp1 = open("Database//top_30_Comedy_movies_url_link", "r")
            temp2 = temp1.read()
            temp3 = temp2.replace('\n', ' ').split(".jpg")
            temp1.close()
            data_top30_gen = temp3
            fun()

        def crime(): # this function contains code for crime page of genres
            global data_top30_gen
            temp1 = open("Database//top_30_Crime_movies_url_link", "r")
            temp2 = temp1.read()
            temp3 = temp2.replace('\n', ' ').split(".jpg")
            temp1.close()
            data_top30_gen = temp3
            fun()

        def fantasy(): # this function contains code for fantasy page of genres
            global data_top30_gen
            temp1 = open("Database//top_30_Fantasy_movies_url_link", "r")
            temp2 = temp1.read()
            temp3 = temp2.replace('\n', ' ').split(".jpg")
            temp1.close()
            data_top30_gen = temp3
            fun()

        def history(): # this function contains code for history page of genres
            global data_top30_gen
            temp1 = open("Database//top_30_History_movies_url_link", "r")
            temp2 = temp1.read()
            temp3 = temp2.replace('\n', ' ').split(".jpg")
            temp1.close()
            data_top30_gen = temp3
            fun()

        def horror(): # this function contains code for horror page of genres
            global data_top30_gen
            temp1 = open("Database//top_30_Horror_movies_url_link", "r")
            temp2 = temp1.read()
            temp3 = temp2.replace('\n', ' ').split(".jpg")
            temp1.close()
            data_top30_gen = temp3
            fun()

        def romance(): # this function contains code for romance page of genres
            global data_top30_gen
            temp1 = open("Database//top_30_Romance_movies_url_link", "r")
            temp2 = temp1.read()
            temp3 = temp2.replace('\n', ' ').split(".jpg")
            temp1.close()
            data_top30_gen = temp3
            fun()

        def science_fiction(): # this function contains code for science_fiction page of genres
            global data_top30_gen
            temp1 = open("Database//top_30_Science Fiction_movies_url_link", "r")
            temp2 = temp1.read()
            temp3 = temp2.replace('\n', ' ').split(".jpg")
            temp1.close()
            data_top30_gen = temp3
            fun()

        def thriller(): # this function contains code for thriller page of genres
            global data_top30_gen
            temp1 = open("Database//top_30_Thriller_movies_url_link", "r")
            temp2 = temp1.read()
            temp3 = temp2.replace('\n', ' ').split(".jpg")
            temp1.close()
            data_top30_gen = temp3
            fun()
        # placing background_image
        background_image = PhotoImage(file="photos//background_go.png")
        Label_background = Label(root, image=background_image)
        Label_background.image = background_image
        Label_background.place(x=0, y=0)

        def on_enter1_(e): # function for giving hovering effects to the button1 while entering the button
            button1_['background'] = "#EB455F"
            button1_['foreground'] = "#141414"

        def on_leave1_(e): # function for giving hovering effects to the button1 while leaving the button
            button1_['background'] = "#141414"
            button1_['foreground'] = "#EB455F"
        # making button1
        button1_ = Button(text="Back To Home", font="aerial 12 bold", borderwidth=0, highlightthickness=0,
                          relief="flat", fg="#EB455F", bg="#141414", activeforeground="#141414",
                          activebackground="#EB455F", command=backgo)
        button1_.bind("<Enter>", on_enter1_) # hovering effect while entering
        button1_.bind("<Leave>", on_leave1_) # hovering effect while leaving
        button1_.place(x=3, y=3.4, width=141, height=48)

        def on_enter2_(e): # function for giving hovering effects to the button2 while entering the button
            button2_['background'] = "#ffa157"
            button2_['foreground'] = "#141414"

        def on_leave2_(e): # function for giving hovering effects to the button2 while leaving the button
            button2_['background'] = "#141414"
            button2_['foreground'] = "#ffa157"
        # making button2
        button2_ = Button(text="Action", font="aerial 12 bold", borderwidth=0, highlightthickness=0, relief="flat",
                          fg="#ffa157", bg="#141414", activeforeground="#141414", activebackground="#ffa157",
                          command=action)
        button2_.bind("<Enter>", on_enter2_) # hovering effect while entering
        button2_.bind("<Leave>", on_leave2_) # hovering effect while leaving
        button2_.place(x=28, y=100, width=121, height=44)

        def on_enter3_(e): # function for giving hovering effects to the button3 while entering the button
            button3_['background'] = "#FFC947"
            button3_['foreground'] = "#141414"

        def on_leave3_(e): # function for giving hovering effects to the button3 while leaving the button
            button3_['background'] = "#141414"
            button3_['foreground'] = "#FFC947"
        # making button3
        button3_ = Button(text="Adventure", font="aerial 12 bold", borderwidth=0, highlightthickness=0, relief="flat",
                          fg="#FFC947", bg="#141414", activeforeground="#141414", activebackground="#FFC947",
                          command=adventure)
        button3_.bind("<Enter>", on_enter3_) # hovering effect while entering
        button3_.bind("<Leave>", on_leave3_) # hovering effect while leaving
        button3_.place(x=163, y=100, width=121, height=44)

        def on_enter4_(e): # function for giving hovering effects to the button4 while entering the button
            button4_['background'] = "#ffa157"
            button4_['foreground'] = "#141414"

        def on_leave4_(e): # function for giving hovering effects to the button4 while leaving the button
            button4_['background'] = "#141414"
            button4_['foreground'] = "#ffa157"
        # making button4
        button4_ = Button(text="Animation", font="aerial 12 bold", borderwidth=0, highlightthickness=0, relief="flat",
                          fg="#B33030", bg="#141414", activeforeground="#141414", activebackground="#B33030",
                          command=animation)
        button4_.bind("<Enter>", on_enter4_) # hovering effect while entering
        button4_.bind("<Leave>", on_leave4_) # hovering effect while leaving
        button4_.place(x=301, y=100, width=121, height=44)

        def on_enter5_(e): # function for giving hovering effects to the button5 while entering the button
            button5_['background'] = "#227C70"
            button5_['foreground'] = "#141414"

        def on_leave5_(e): # function for giving hovering effects to the button5 while leaving the button
            button5_['background'] = "#141414"
            button5_['foreground'] = "#227C70"
        # making button5
        button5_ = Button(text="Comedy", font="aerial 12 bold", borderwidth=0, highlightthickness=0, relief="flat",
                          fg="#227C70", bg="#141414", activeforeground="#141414", activebackground="#227C70",
                          command=comedy)
        button5_.bind("<Enter>", on_enter5_) # hovering effect while entering
        button5_.bind("<Leave>", on_leave5_) # hovering effect while leaving
        button5_.place(x=439, y=100, width=121, height=44)

        def on_enter6_(e): # function for giving hovering effects to the button6 while entering the button
            button6_['background'] = "#579BB1"
            button6_['foreground'] = "#141414"

        def on_leave6_(e): # function for giving hovering effects to the button6 while leaving the button
            button6_['background'] = "#141414"
            button6_['foreground'] = "#579BB1"
        # making button6
        button6_ = Button(text="Crime", font="aerial 12 bold", borderwidth=0, highlightthickness=0, relief="flat",
                          fg="#579BB1", bg="#141414", activeforeground="#141414", activebackground="#579BB1",
                          command=crime)
        button6_.bind("<Enter>", on_enter6_) # hovering effect while entering
        button6_.bind("<Leave>", on_leave6_) # hovering effect while leaving
        button6_.place(x=577, y=100, width=121, height=44)

        def on_enter7_(e): # function for giving hovering effects to the button7 while entering the button
            button7_['background'] = "#FFB100"
            button7_['foreground'] = "#141414"

        def on_leave7_(e): # function for giving hovering effects to the button7 while leaving the button
            button7_['background'] = "#141414"
            button7_['foreground'] = "#FFB100"
        # making button7
        button7_ = Button(text="Fantasy", font="aerial 12 bold", borderwidth=0, highlightthickness=0, relief="flat",
                          fg="#FFB100", bg="#141414", activeforeground="#141414", activebackground="#FFB100",
                          command=fantasy)
        button7_.bind("<Enter>", on_enter7_) # hovering effect while entering
        button7_.bind("<Leave>", on_leave7_) # hovering effect while leaving
        button7_.place(x=715, y=100, width=121, height=44)

        def on_enter8_(e): # function for giving hovering effects to the button8 while entering the button
            button8_['background'] = "#439A97"
            button8_['foreground'] = "#141414"

        def on_leave8_(e): # function for giving hovering effects to the button8 while leaving the button
            button8_['background'] = "#141414"
            button8_['foreground'] = "#439A97"
        # making button8
        button8_ = Button(text="History", font="aerial 12 bold", borderwidth=0, highlightthickness=0, relief="flat",
                          fg="#439A97", bg="#141414", activeforeground="#141414", activebackground="#439A97",
                          command=history)
        button8_.bind("<Enter>", on_enter8_) # hovering effect while entering
        button8_.bind("<Leave>", on_leave8_) # hovering effect while leaving
        button8_.place(x=851, y=100, width=121, height=44)

        def on_enter9_(e): # function for giving hovering effects to the button9 while entering the button
            button9_['background'] = "#00FFD1"
            button9_['foreground'] = "#141414"

        def on_leave9_(e): # function for giving hovering effects to the button9 while leaving the button
            button9_['background'] = "#141414"
            button9_['foreground'] = "#00FFD1"
        # making button9
        button9_ = Button(text="Horror", font="aerial 12 bold", borderwidth=0, highlightthickness=0, relief="flat",
                          fg="#00FFD1", bg="#141414", activeforeground="#141414", activebackground="#00FFD1",
                          command=horror)
        button9_.bind("<Enter>", on_enter9_) # hovering effect while entering
        button9_.bind("<Leave>", on_leave9_) # hovering effect while leaving
        button9_.place(x=989, y=100, width=121, height=44)

        def on_enter10_(e): # function for giving hovering effects to the button10 while entering the button
            button10_['background'] = "#FB2576"
            button10_['foreground'] = "#141414"

        def on_leave10_(e): # function for giving hovering effects to the button10 while leaving the button
            button10_['background'] = "#141414"
            button10_['foreground'] = "#FB2576"
        # making button10
        button10_ = Button(text="Romance", font="aerial 12 bold", borderwidth=0, highlightthickness=0, relief="flat",
                           fg="#FB2576", bg="#141414", activeforeground="#141414", activebackground="#FB2576",
                           command=romance)
        button10_.bind("<Enter>", on_enter10_) # hovering effect while entering
        button10_.bind("<Leave>", on_leave10_) # hovering effect while leaving
        button10_.place(x=1127, y=100, width=121, height=44)

        def on_enter11_(e): # function for giving hovering effects to the button11 while entering the button
            button11_['background'] = "#46B5D1"
            button11_['foreground'] = "#141414"

        def on_leave11_(e): # function for giving hovering effects to the button11 while leaving the button
            button11_['background'] = "#141414"
            button11_['foreground'] = "#46B5D1"
        # making button11
        button11_ = Button(text="Science Fiction", font="aerial 12 bold", borderwidth=0, highlightthickness=0,
                           relief="flat", fg="#46B5D1", bg="#141414", activeforeground="#141414",
                           activebackground="#46B5D1", command=science_fiction)
        button11_.bind("<Enter>", on_enter11_) # hovering effect while entering
        button11_.bind("<Leave>", on_leave11_) # hovering effect while leaving
        button11_.place(x=1265, y=100, width=121, height=44)

        def on_enter12_(e): # function for giving hovering effects to the button12 while entering the button
            button12_['background'] = "#59CE8F"
            button12_['foreground'] = "#141414"

        def on_leave12_(e): # function for giving hovering effects to the button12 while leaving the button
            button12_['background'] = "#141414"
            button12_['foreground'] = "#59CE8F"
        # making button12
        button12_ = Button(text="Thriller", font="aerial 12 bold", borderwidth=0, highlightthickness=0, relief="flat",
                           fg="#59CE8F", bg="#141414", activeforeground="#141414", activebackground="#59CE8F",
                           command=thriller)
        button12_.bind("<Enter>", on_enter12_) # hovering effect while entering
        button12_.bind("<Leave>", on_leave12_) # hovering effect while leaving
        button12_.place(x=1403, y=100, width=121, height=44)

        global label1
        global label2
        global label3
        global num1
        global num2
        global num3
        global frame1
        global frame2
        global frame3
        global forward_button
        global backward_button
        init(2)

    def similar_to_search(): # defining the function that will execute when user clicks on similar_to_search button on homepage
        global data_top30_sts
        data_top30_sts = data_top30
        hometab_destroy()

        def get_recommendations(title):
            idx = indices[title]  # movie id corrosponding to the given title
            sim_scores = list(
                enumerate(cosine_sim[idx]))  # list of cosine similarity scores value along the given index
            sim_scores = sorted(sim_scores, key=lambda x: x[1],
                                reverse=True)  # sorting the given scores in ascending order
            sim_scores = sim_scores[0:31]  # Taking only the top 30 scores
            movie_indices = [i[0] for i in sim_scores]  # Finding the indices of 30 most similar movies
            return data_smd['title'].iloc[movie_indices]

        def back(): # defining the function for back to home button in the similar_to_search section
            # destroying the elements of the current list of 3 movies so that we can move to new 3 movies
            Label_background.destroy()
            my_entry.destroy()
            my_list.destroy()
            button1_.destroy()
            button2_.destroy()
            frame1.destroy()
            frame2.destroy()
            frame3.destroy()
            hometab()

        def search_sts(): # function for displaying the top30 movies related to the search of the user 
            global data_top30_sts
            curr_list = get_recommendations(my_entry.get()).head(30)
            curr_link_list = []
            for it in range(30):
                id = curr_list.keys()[it]
                curr_link_list.append(data_content_based['link'][id])
            data_top30_sts = curr_link_list
            global label1
            global label2
            global label3
            global num1
            global num2
            global num3
            global frame1
            global frame2
            global frame3
            global forward_button
            global backward_button
            label1.pack_forget()
            label2.pack_forget()
            label3.pack_forget()
            forward_button.pack_forget()
            backward_button.pack_forget()
            num1.pack_forget()
            num2.pack_forget()
            num3.pack_forget()
            # making label
            num1 = Label(frame1, text=1, font="satoshi 15 bold", fg="white", bg="black")
            num1.pack()
            num2 = Label(frame2, text=2, font="satoshi 15 bold", fg="white", bg="black")
            num2.pack()
            num3 = Label(frame3, text=3, font="satoshi 15 bold", fg="white", bg="black")
            num3.pack()
            # making and placing forward and backward button
            backward_button = Button(root, text="<<", font="satoshi 15 bold", bg="black", fg="white", command=backward,
                                     state=DISABLED)
            forward_button = Button(root, text=">>", font="satoshi 15 bold", fg="white", bg="black",
                                    command=lambda: forward(3,3))

            backward_button.place(x=1328, y=468, width=54, height=50)
            forward_button.place(x=1419, y=468, width=54, height=50)
            # getting movie poster links from the data_top30_sts file
            link1 = f"{data_top30_sts[0]}.jpg"
            u1 = urlopen(link1)
            rg1 = u1.read()
            u1.close()

            link2 = f"{data_top30_sts[1]}.jpg"
            u2 = urlopen(link2)
            rg2 = u2.read()
            u2.close()

            link3 = f"{data_top30_sts[2]}.jpg"
            u3 = urlopen(link3)
            rg3 = u3.read()
            u3.close()
            # placing movies poster on the labels created above
            photo1 = ImageTk.PhotoImage(data=rg1)
            label1 = Label(frame1, image=photo1, width=400, height=500, bg="black")
            label1.image = photo1
            photo2 = ImageTk.PhotoImage(data=rg2)
            label2 = Label(frame2, image=photo2, width=400, height=500, bg="black")
            label2.image = photo2
            photo3 = ImageTk.PhotoImage(data=rg3)
            label3 = Label(frame3, image=photo3, width=400, height=500, bg="black")
            label3.image = photo3

            label1.pack(pady=4)
            label2.pack(pady=4)
            label3.pack(pady=4)

        def update_list(data): # updating the recommender list
            my_list.delete(0, END)
            for item in data:
                my_list.insert(END, item)

        def fillout(e): # updating the "my_entry" 
            my_entry.delete(0, END)
            my_entry.insert(0, my_list.get(ACTIVE))

        def check(e): # this function will suggest movies based on the prefix matching of what user has entered 
            typed = my_entry.get()
            if typed == '':
                data = starting_list
            else:
                data = []
                for item in data_smd['title']:
                    if (re.match(typed, item, re.IGNORECASE)):
                        data.append(item)
            update_list(data)
        # making background_image
        background_image = PhotoImage(file="photos//background_sts.png")
        Label_background = Label(root, image=background_image)
        Label_background.image = background_image
        Label_background.place(x=0, y=0)

        def on_enter1_(e): # function for giving hovering effects to the button1 while entering the button
            button1_['background'] = "#EB455F"
            button1_['foreground'] = "#141414"

        def on_leave1_(e): # function for giving hovering effects to the button1 while leaving the button
            button1_['background'] = "#141414"
            button1_['foreground'] = "#EB455F"
        # making button1
        button1_ = Button(text="Back To Home", font="aerial 12 bold", borderwidth=0, highlightthickness=0,
                          relief="flat", fg="#EB455F", bg="#141414", activeforeground="#141414",
                          activebackground="#EB455F", command=back)
        button1_.bind("<Enter>", on_enter1_) # hovering effect while entering
        button1_.bind("<Leave>", on_leave1_) # hovering effect while leaving
        button1_.place(x=3, y=3.4, width=141, height=48)

        my_entry = Entry(bd=0, bg="#d9d9d9", highlightthickness=0, font="Helvetica 15")
        my_entry.place(x=495, y=82, width=405, height=33)
        
        def on_enter2_(e): # function for giving hovering effects to the button2 while entering the button
            button2_['background'] = "#45EBA5"
            button2_['foreground'] = "#141414"

        def on_leave2_(e): # function for giving hovering effects to the button2 while leaving the button
            button2_['background'] = "#141414"
            button2_['foreground'] = "#45EBA5"
        # making button2
        button2_ = Button(text="Search", font="aerial 15", borderwidth=0, highlightthickness=0, relief="flat",
                          fg="#45EBA5", bg="#141414", activeforeground="#141414", activebackground="#45EBA5",
                          command=search_sts)
        button2_.bind("<Enter>", on_enter2_) # hovering effect while entering
        button2_.bind("<Leave>", on_leave2_) # hovering effect while leaving
        button2_.place(x=905, y=82, width=78, height=33)
        my_list = Listbox(root, relief="flat", fg="#ffffff", bg="#141414")
        my_list.place(x=495, y=120, width=365, height=114)
        starting_list = ['The Shawshank Redemption', 'The Godfather', 'The Dark Knight', 'Fight Club', 'Pulp Fiction',
                         'Forrest Gump']
        update_list(starting_list)
        my_list.bind("<<ListboxSelect>>", fillout)
        my_entry.bind("<KeyRelease>", check)
        # getting movie poster links from the data_top30_sts file
        link1 = f"{data_top30_sts[0]}.jpg"
        u1 = urlopen(link1)
        rg1 = u1.read()
        u1.close()

        link2 = f"{data_top30_sts[1]}.jpg"
        u2 = urlopen(link2)
        rg2 = u2.read()
        u2.close()

        link3 = f"{data_top30_sts[2]}.jpg"
        u3 = urlopen(link3)
        rg3 = u3.read()
        u3.close()

        global label1
        global label2
        global label3
        global num1
        global num2
        global num3
        global frame1
        global frame2
        global frame3
        global forward_button
        global backward_button
        init(3)

    def rate_to_get(): # defining the function that will execute when user clicks on "rate to get" button on homepage
        hometab_destroy()
        def rate_to_get_result(): # function to display the top9 movies after rating done by user
            # implementing the SVD algorithm for collaborative filtering 
            
            data_ratings.isna().sum()  # checking for missing values
            movies = data_ratings['movieId'].nunique() # nunique is similar to count but only takes unique values
            users = data_ratings['userId'].nunique()
            columns = ['userId', 'movieId', 'rating'] # columns to use for training
            # create reader from surprise 
            # the rating should lie in the provided scale
            reader = Reader(rating_scale=(1, 5))
            taken_id_list = [] # this list stores the movies id for which the user has given rating
            for it in final_list:
                df2 = movies_data.loc[movies_data['title'] == it, 'id'].iloc[0]
                taken_id_list.append(df2)

            test_case = {'userId': [99999, 99999, 99999, 99999, 99999],
                         'movieId': [taken_id_list[0], taken_id_list[1], taken_id_list[2], taken_id_list[3], taken_id_list[4]],
                         'rating': [(s1.get()), (s2.get()), (s3.get()), (s4.get()), (s5.get())]
                         }

            df = pd.DataFrame(test_case)
            frames = [data_ratings, df]
            result = pd.concat(frames)
            
            data = Dataset.load_from_df(result[columns], reader) # create dataset from dataframe

            trainset = data.build_full_trainset() # create trainset

            testset = trainset.build_anti_testset() # create testset, here the anti_testset is testset

            model = SVD(n_epochs=25, verbose=True)
            cross_validate(model, data, measures=['RMSE', 'MAE'], cv=5, verbose=True) # cv is the number of parts in which data will be                                                                                             divided

            prediction = model.test(testset) # prediction

            def get_top_n(prediction, n): # this function recommend the topn movies based on prediction using the surprise library
                # First map the predictions to each user
                top_n = defaultdict(list) 
                for uid, iid, true_r, est, _ in prediction:
                    top_n[uid].append((iid, est))
                # Then sort the predictions for each user and retrieve the n highest ones
                for uid, user_ratings in top_n.items():
                    user_ratings.sort(key=lambda x: x[1], reverse=True)
                    top_n[uid] = user_ratings[:n]

                return top_n

            rcmnd = []
            top_n = get_top_n(prediction, n=30)
            # to store the imdb_id of top30 movies in the "rcmnd" list
            for uid, user_ratings in top_n.items():
                if uid == 99999:
                    for (iid, rating) in user_ratings:
                        for i in range(movies_data.shape[0]):
                            if movies_data['id'][i] == iid:
                                rcmnd.append(movies_data['imdb_id'][i])
                    break
            
            data_top9_rtg.clear()
            
            # to store the top9 movies poster link in "data_top9_rtg" list
            for it in range(9):
                id = rcmnd[it]
                request_id = "http://www.omdbapi.com/?i=" + id + "&apikey=4a0bad91"
                json_data = requests.get(request_id).json()
                data_top9_rtg.append(json_data['Poster'])
            # function calls for destroying the page where user has rated
            Label_background.destroy()
            button1_.destroy()
            l1.destroy()
            l2.destroy()
            l3.destroy()
            l4.destroy()
            l5.destroy()
            s1.destroy()
            s2.destroy()
            s3.destroy()
            s4.destroy()
            s5.destroy()
            my_entry.destroy()
            my_list.destroy()
            button2_.destroy()
            button3_.destroy()
            button4_.destroy()
            
            def backrtg(): # definig the function for "back" button, after the execution of this function user will reach to rating page 
                # function calls to destroy the elements of the "rate_to_get_result" page
                Label_background2.destroy()
                button1__.destroy()
                frame1.destroy()
                frame2.destroy()
                frame3.destroy()
                backward_button.destroy()
                forward_button.destroy()
                rate_to_get()
            # placing the background image on "rate_to_get_result" page
            background2_image = PhotoImage(file="photos//background_rtgr.png")
            Label_background2 = Label(root, image=background2_image)
            Label_background2.image = background2_image
            Label_background2.place(x=0, y=0)

            def on_enter1__(e): # function for giving hovering effects to the buttons while entering the "back" button
                button1__['background'] = "#EB455F"
                button1__['foreground'] = "#141414"

            def on_leave1__(e): # function for giving hovering effects to the buttons while leaving the "back" button
                button1__['background'] = "#141414"
                button1__['foreground'] = "#EB455F"

            button1__ = Button(text="Back", font="aerial 12 bold", borderwidth=0, highlightthickness=0, relief="flat",
                               fg="#EB455F", bg="#141414", activeforeground="#141414", activebackground="#EB455F",
                               command=backrtg)
            button1__.bind("<Enter>", on_enter1__) # hovering effect while entering "back" button
            button1__.bind("<Leave>", on_leave1__) # hovering effect while leaving "back" button
            button1__.place(x=3, y=3.4, width=141, height=48)
            # getting movie poster links from the data_top9_rtg file
            link1 = f"{data_top9_rtg[0]}.jpg"
            u1 = urlopen(link1)
            rg1 = u1.read()
            u1.close()

            link2 = f"{data_top9_rtg[1]}.jpg"
            u2 = urlopen(link2)
            rg2 = u2.read()
            u2.close()

            link3 = f"{data_top9_rtg[2]}.jpg"
            u3 = urlopen(link3)
            rg3 = u3.read()
            u3.close()

            global label1
            global label2
            global label3
            global num1
            global num2
            global num3
            global frame1
            global frame2
            global frame3
            global forward_button
            global backward_button
            init(4) # call to "init" function

        def back(): # definig the function for "back to home button" in the rate_to_get_page, after execution of this function user will                         reach to home_page
            # function calls to destroy the elements of the "rate_to_get" page
            Label_background.destroy()
            button1_.destroy()
            l1.destroy()
            l2.destroy()
            l3.destroy()
            l4.destroy()
            l5.destroy()
            s1.destroy()
            s2.destroy()
            s3.destroy()
            s4.destroy()
            s5.destroy()
            my_entry.destroy()
            my_list.destroy()
            button2_.destroy()
            hometab()
        
        
        def update(data): # updating the recommender list
            my_list.delete(0, END)

            for item in data:
                my_list.insert(END, item)

        def fillout(e): # updating the "my_entry" 
            my_entry.delete(0, END)
            my_entry.insert(0, my_list.get(ACTIVE))

        def check(e): # this function will suggest movies based on the prefix matching of what user has entered
            typed = my_entry.get()
            if typed == '':
                data = starting_list
            else:
                data = []
                for item in movies_data['original_title']:
                    if (re.match(typed, item, re.IGNORECASE)):
                        data.append(item)
            update(data)
        # placing the background image on "rate_to_get_result" page
        background_image = PhotoImage(file="photos//background_rtg.png")
        Label_background = Label(root, image=background_image)
        Label_background.image = background_image
        Label_background.place(x=0, y=0)

        add_cnt = 0
        l1 = Label()
        l2 = Label()
        l3 = Label()
        l4 = Label()
        l5 = Label()
        final_list = []

        def add_list(): # add the movie_name in the "movies_list" section after the user click on "add_in_list" button
            flag = 0
            for it in movies_data['original_title']:
                if (it == my_entry.get()):
                    flag = 1
            if flag == 0:
                return
            nonlocal add_cnt
            nonlocal l1, l2, l3, l4, l5
            final_list.append(my_entry.get())
            if add_cnt == 0:
                l1 = Label(root, text=my_entry.get(), font="aerial 15", bg="#f86263")
                l1.place(x=455, y=530, width=450, height=35)
            elif add_cnt == 1:
                l2 = Label(root, text=my_entry.get(), bg='#ffa157', font="aerial 15")
                l2.place(x=455, y=575, width=450, height=35)
            elif add_cnt == 2:
                l3 = Label(root, text=my_entry.get(), font="aerial 15", bg="#25dae9")
                l3.place(x=455, y=620, width=450, height=35)
            elif add_cnt == 3:
                l4 = Label(root, text=my_entry.get(), font="aerial 15", bg="#ffcc66")
                l4.place(x=455, y=665, width=450, height=35)
            elif add_cnt == 4:
                l5 = Label(root, text=my_entry.get(), font="aerial 15", bg="#59CE8F")
                l5.place(x=455, y=710, width=450, height=35)
            add_cnt = add_cnt + 1

        def cross(): # delete the last movie_name in the "movie_list" section
            nonlocal add_cnt
            if (add_cnt == 1):
                l1.destroy()
            elif (add_cnt == 2):
                l2.destroy()
            elif (add_cnt == 3):
                l3.destroy()
            elif (add_cnt == 4):
                l4.destroy()
            elif (add_cnt == 5):
                l5.destroy()
            add_cnt = add_cnt - 1
         
        # used spinbox to get rating from the user
        s1 = Spinbox(root, from_=1, to=5, bg="#f86263", font="aerial 15")
        s1.place(x=940, y=530, width=100, height=35)

        s2 = Spinbox(root, from_=1, to=5, font="aerial 15", bg='#ffa157')
        s2.place(x=940, y=575, width=100, height=35)

        s3 = Spinbox(root, from_=1, to=5, font="aerial 15", bg="#25dae9")
        s3.place(x=940, y=620, width=100, height=35)

        s4 = Spinbox(root, from_=1, to=5, font="aerial 15", bg="#ffcc66")
        s4.place(x=940, y=665, width=100, height=35)

        s5 = Spinbox(root, from_=1, to=5, font="aerial 15", bg="#59CE8F")
        s5.place(x=940, y=710, width=100, height=35)

        def on_enter1_(e): # function for giving hovering effects to the button while entering the "back to home" button
            button1_['background'] = "#EB455F"
            button1_['foreground'] = "#141414"

        def on_leave1_(e): # function for giving hovering effects to the button while leavng the "back to home" button
            button1_['background'] = "#141414"
            button1_['foreground'] = "#EB455F"

        button1_ = Button(text="Back To Home", font="aerial 12 bold", borderwidth=0, highlightthickness=0,
                          relief="flat", fg="#EB455F", bg="#141414", activeforeground="#141414",
                          activebackground="#EB455F", command=back)
        button1_.bind("<Enter>", on_enter1_)
        button1_.bind("<Leave>", on_leave1_)
        button1_.place(x=3, y=3.4, width=141, height=48)
        my_entry = Entry(bd=0, bg="#d9d9d9", highlightthickness=0, font="Helvetica 15")
        my_entry.place(x=455, y=215, width=483, height=38)

        def on_enter2_(e): # function for giving hovering effects to the button while entering the "add in list" button
            button2_['background'] = "#45EBA5"
            button2_['foreground'] = "#141414"

        def on_leave2_(e): # function for giving hovering effects to the button while leavng the "add in list" button
            button2_['background'] = "#141414"
            button2_['foreground'] = "#45EBA5"

        button2_ = Button(text="Add in List", font="aerial 15", borderwidth=0, highlightthickness=0, relief="flat",
                          fg="#45EBA5", bg="#141414", activeforeground="#141414", activebackground="#45EBA5",
                          command=add_list)
        button2_.bind("<Enter>", on_enter2_) # hovering effect while entering
        button2_.bind("<Leave>", on_leave2_) # hovering effect while leaving
        button2_.place(x=940, y=215, width=98, height=40)

        my_list = Listbox(root, relief="flat", fg="#ffffff", bg="#141414")
        my_list.place(x=455, y=258, width=388, height=118)
        # this list recommend default to the user
        starting_list = ['The Shawshank Redemption', 'The Godfather', 'The Dark Knight', 'Fight Club', 'Pulp Fiction',
                         'Forrest Gump']
        update(starting_list)
        my_list.bind("<<ListboxSelect>>", fillout)
        my_entry.bind("<KeyRelease>", check)

        delete_icon = PhotoImage(file="photos//icons8-cross-mark-button-emoji-32.png")

        def on_enter3_(e): # function for giving hovering effects to the button while entering the button3
            button3_['background'] = "#DC3535"
            button3_['foreground'] = "#141414"

        def on_leave3_(e): # function for giving hovering effects to the button while leaving the button3
            button3_['background'] = "#141414"
            button3_['foreground'] = "#DC3535"

        button3_ = Button(font="aerial 15", borderwidth=0, highlightthickness=0, relief="flat", fg="#DC3535",
                          bg="#141414", activeforeground="#141414", activebackground="#DC3535", command=cross)
        button3_.config(compound='right', image=delete_icon)
        button3_.image = delete_icon
        button3_.bind("<Enter>", on_enter3_) # hovering effect while entering
        button3_.bind("<Leave>", on_leave3_) # hovering effect while leaving
        button3_.place(x=940, y=755, width=35, height=35)

        def on_enter4_(e): # function for giving hovering effects to the button while entering the button4
            button4_['background'] = "#45EBA5"
            button4_['foreground'] = "#141414"

        def on_leave4_(e): # function for giving hovering effects to the button while leaving the button4
            button4_['background'] = "#141414"
            button4_['foreground'] = "#45EBA5"

        button4_ = Button(text="Submit", font="aerial 15", borderwidth=0, highlightthickness=0, relief="flat",
                          fg="#45EBA5", bg="#141414", activeforeground="#141414", activebackground="#45EBA5",
                          command=rate_to_get_result)
        button4_.bind("<Enter>", on_enter4_) # hovering effect while entering
        button4_.bind("<Leave>", on_leave4_) # hovering effect while leaving
        button4_.place(x=1080, y=730, width=100, height=45)

    photo_logo = PhotoImage(file="photos//movies_go_logo.png")
    root.iconphoto(False, photo_logo)

    background_img_home = PhotoImage(file=f"photos//home_background.png")
    background_img_label = Label(root, image=background_img_home, bg="#ffffff", height=840, width=1544, bd=0,
                                 highlightthickness=0, relief="ridge")
    background_img_label.image = background_img_home
    background_img_label.place(x=-7, y=0)

    def on_enter1(e): # function for giving hovering effects to the button while entering the button1
        mybutton1['background'] = "#ffcc66"
        mybutton1['foreground'] = "#141414"

    def on_leave1(e): # function for giving hovering effects to the button while leaving the button1
        mybutton1['background'] = "#141414"
        mybutton1['foreground'] = "#ffcc66"

    mybutton1 = Button(text="Top Hits", font="aerial 12 bold", borderwidth=0, highlightthickness=0, relief="flat",
                       fg="#ffcc66", bg="#141414", activeforeground="#141414", activebackground="#ffcc66",
                       command=top_hits_tab)
    mybutton1.bind("<Enter>", on_enter1) # hovering effect while entering
    mybutton1.bind("<Leave>", on_leave1) # hovering effect while leaving
    mybutton1.place(x=749, y=2, width=181, height=47)

    def on_enter2(e): # function for giving hovering effects to the button while entering the button2
        mybutton2['background'] = '#25dae9'
        mybutton2['foreground'] = "#141414"

    def on_leave2(e): # function for giving hovering effects to the button while leaving the button2
        mybutton2['background'] = "#141414"
        mybutton2['foreground'] = '#25dae9'

    mybutton2 = Button(text="Top Genres", font="aerial 12 bold", borderwidth=0, highlightthickness=0, relief="flat",
                       fg='#25dae9', bg="#141414", activeforeground="#141414", activebackground="#25dae9", command=top_genres
                       )
    mybutton2.bind("<Enter>", on_enter2) # hovering effect while entering
    mybutton2.bind("<Leave>", on_leave2) # hovering effect while leaving
    mybutton2.place(x=944, y=2, width=181, height=47)

    def on_enter3(e): # function for giving hovering effects to the button while entering the button3
        mybutton3['background'] = '#f86263'
        mybutton3['foreground'] = "#141414"

    def on_leave3(e): # function for giving hovering effects to the button while leaving the button3
        mybutton3['background'] = "#141414"
        mybutton3['foreground'] = '#f86263'

    mybutton3 = Button(text="Similar To Search", font="aerial 12 bold", borderwidth=0, highlightthickness=0,
                       relief="flat", fg='#f86263', bg="#141414", activeforeground="#141414",command=similar_to_search,
                       activebackground='#f86263')
    mybutton3.bind("<Enter>", on_enter3) # hovering effect while entering
    mybutton3.bind("<Leave>", on_leave3) # hovering effect while leaving
    mybutton3.place(x=1139, y=2, width=181, height=47)

    def on_enter4(e): # function for giving hovering effects to the button while entering the button4
        mybutton4['background'] = '#ffa157'
        mybutton4['foreground'] = "#141414"

    def on_leave4(e): # function for giving hovering effects to the button while leaving the button4
        mybutton4['background'] = "#141414"
        mybutton4['foreground'] = '#ffa157'

    mybutton4 = Button(text="Rate And Get", font="aerial 12 bold", borderwidth=0, highlightthickness=0,
                       relief="flat", fg='#ffa157', bg="#141414", activeforeground="#141414",
                       activebackground='#ffa157',command=rate_to_get)
    mybutton4.bind("<Enter>", on_enter4) # hovering effect while entering
    mybutton4.bind("<Leave>", on_leave4) # hovering effect while leaving
    mybutton4.place(x=1334, y=2, width=181, height=47)

hometab()
root.mainloop()
